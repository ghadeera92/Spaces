
 <%# CONTAINER  %>
<%# <div class="bg-white p-10 border rounded">   %>
 <%# HEADING  %>
 
  <h1 class="heading-primary">
      Have a Productive Day &hearts;!
  </h1> 

  <%# CALENDER SECTION %>
  <div id="calendar">
    <div id="meeting-calendar">
      <%= render "calender", events: events  %>
    </div>
  </div>

  <%# EVENTS SECTION %>
  <div class="container">
          <h1 class="heading-primary">All Events</h1>
          <div class="accordion">
            <dl>
            <% events.each do |event| %>
              <%# EVENT HEADER %>
              <dt>
                <a href="#accordion1" aria-expanded="false" aria-controls="accordion1" class="accordion-title accordionTitle js-accordionTrigger"><%= event.name%><span id=<%= event.id %>></span></a>
              </dt>
              <%# EVENT DETAILS %>
              <dd class="accordion-content accordionItem is-collapsed" id="accordion1" aria-hidden="true">
                <p>
                <strong>START: </strong><%= readable_time(event.start_time) %> &ndash;
                <strong>END: </strong><%= readable_time(event.end_time) %></p>
                <%= link_to "Delete", event, method: :delete, class: "btn btn-danger",data: { confirm: "Are you sure you want to delete this Event?" } %> 
                 <%= link_to "Edit", edit_event_path(event.id), class: "btn btn-danger"%>
              </dd>
              <% end %>
            </dl>
          </div>
        </div>
</div>


<%# JAVASCRIPT FOR EVENT LIST %>
<script>
(function(){
	var d = document,
	accordionToggles = d.querySelectorAll('.js-accordionTrigger'),
	setAria,
	setAccordionAria,
	switchAccordion,
  touchSupported = ('ontouchstart' in window),
  pointerSupported = ('pointerdown' in window);
  
  skipClickDelay = function(e){
    e.preventDefault();
    e.target.click();
  }

		setAriaAttr = function(el, ariaType, newProperty){
		el.setAttribute(ariaType, newProperty);
	};
	setAccordionAria = function(el1, el2, expanded){
		switch(expanded) {
      case "true":
      	setAriaAttr(el1, 'aria-expanded', 'true');
      	setAriaAttr(el2, 'aria-hidden', 'false');
      	break;
      case "false":
      	setAriaAttr(el1, 'aria-expanded', 'false');
      	setAriaAttr(el2, 'aria-hidden', 'true');
      	break;
      default:
				break;
		}
	};
//function
switchAccordion = function(e) {
  console.log("triggered");
	e.preventDefault();
	var thisAnswer = e.target.parentNode.nextElementSibling;
	var thisQuestion = e.target;
	if(thisAnswer.classList.contains('is-collapsed')) {
		setAccordionAria(thisQuestion, thisAnswer, 'true');
	} else {
		setAccordionAria(thisQuestion, thisAnswer, 'false');
	}
  	thisQuestion.classList.toggle('is-collapsed');
  	thisQuestion.classList.toggle('is-expanded');
		thisAnswer.classList.toggle('is-collapsed');
		thisAnswer.classList.toggle('is-expanded');
 	
  	thisAnswer.classList.toggle('animateIn');
	};
	for (var i=0,len=accordionToggles.length; i<len; i++) {
		if(touchSupported) {
      accordionToggles[i].addEventListener('touchstart', skipClickDelay, false);
    }
    if(pointerSupported){
      accordionToggles[i].addEventListener('pointerdown', skipClickDelay, false);
    }
    accordionToggles[i].addEventListener('click', switchAccordion, false);
  }
})();
</script>